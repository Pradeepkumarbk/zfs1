version: 2
jobs:
  build:
    docker:
      - image: ubuntu:16.04
    # machine: true
    environment:
      # ARCH: $(go env GOARCH)
      NODE_DISK_MANAGER: ndm
      CHANGE_MINIKUBE_NONE_USER: true
    working_directory: /go/src/github.com/openebs/node-disk-manager
    steps:
      - run:
          # To avoid removing sudo from everywhere I came up with this solution.
          name: Faking sudo
          command: |aversion: 2
jobs:
 build:
   machine: true
   environment:
     global:
       # Travis limits maximum log size, we have to cut tests output 
       - CODECOV_TOKEN="96de2ea3-9e75-4db3-a83a-31b9580a795b"
       # ZFS_TEST_TRAVIS_LOG_MAX_LENGTH=800
     matrix:
       # tags are mainly in ascending order
       - ZFS_BUILD_TAGS=0
       - ZFS_BUILD_TAGS=1
   steps:
     - checkout
     -run: sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
     -run: sudo apt-get update -qq
     -run: sudo apt-get install --yes -qq gcc-6 g++-6
     -run: sudo apt-get install --yes -qq build-essential autoconf libtool gawk alien fakeroot linux-headers-$(uname -r) libaio-dev
     -run: sudo apt-get install --yes -qq zlib1g-dev uuid-dev libattr1-dev libblkid-dev libselinux-dev libudev-dev libssl-dev
     -run: sudo apt-get install --yes -qq lcov libjemalloc-dev
     # packages for tests
     -run: sudo apt-get install --yes -qq parted lsscsi ksh attr acl nfs-kernel-server fio
     -run: sudo apt-get install --yes -qq libgtest-dev cmake
     # packages for debugging
     -run: sudo apt-get install gdb
     # use gcc-6 by default
     -run: sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-6 /usr/bin/gcc
     -run: sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-6 /usr/bin/g++
     -run: pushd .
     -run: cd /usr/src/gtest
     -run: sudo cmake CMakeLists.txt
     -run: sudo make -j4
     -run: sudo cp *.a /usr/lib
     -run: popd
     -run: cd ..
 # we need fio repo to build zfs replica fio engine
     -run: git clone https://github.com/axboe/fio
     -run: cd fio
    # TODO: replace commit hash by version tag in future
     -run: git checkout 2e4ef4fbd69eb6d4c07f2f362463e3f3df2e808c
     -run: ./configure
     -run: make -j4
     -run: cd ..
     -run: git clone https://github.com/openebs/spl
     -run: cd spl
     -run: git checkout spl-0.7.4
     -run: sh autogen.sh
     -run: ./configure
     -run: if [ $ZFS_BUILD_TAGS = 0 ]; then
             make -j4;
           else
             make --no-print-directory -s pkg-utils pkg-kmod;
             dpkg -i *.deb;
           fi
     -run: cd ../zfs
     -run: sh autogen.sh
     -run: if [ $ZFS_BUILD_TAGS = 0 ]; then
             ./configure --with-config=user --enable-code-coverage=yes --enable-debug --enable-uzfs=yes --with-jemalloc --with-fio=$PWD/../fio || true;
             make -j4;
           else
             ./configure --enable-code-coverage=yes --enable-debug || true;
             make --no-print-directory -s pkg-utils pkg-kmod || true;
             dpkg -i *.deb || true;
           fi
      -run: make cstyle;
    # run ztest and test supported zio backends
    # XXX enable the ztest when ticket #152 is fixed
      -run: if [ $ZFS_BUILD_TAGS = 0 ]; then
             export FIO_SRCDIR=$PWD/../fio;
             timeout 60 sudo bash ./tests/cbtest/script/test_uzfs.sh -T all || true;
           else
             sudo /sbin/modprobe zfs;
             timeout 10 /sbin/ztest || true;
           fi
            echo 'function sudo { $@; }' >> $BASH_ENV
            echo 'export -f sudo' >> $BASH_ENV
            source $BASH_ENV

      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Updating the system
          command: apt update

      - run:
          name: Upgrading the system
          command: |
            apt -y upgrade

      - run:
          name: Installing Python
          command: apt install -y python2.7

      - run:
          name: Installing curl
          command: apt install -y curl

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv -f /tmp/docker/* /usr/bin

      - run: pwd

      - run: cat /etc/os-release
      # - run: lsb_release -a

      - run: ls -lrth

      # Prequesites for kubelet, kubeadm and kubectl
      - run:
          name: Prequesites for kubelet, kubeadm and kubectl
          command: |
            apt install -y apt-transport-https
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
            deb http://apt.kubernetes.io/ kubernetes-xenial main
            EOF
            apt update

      # Installing kubelet
      - run:
          name: Installing kubelet
          command: apt install -y kubelet=1.10.0-00

      # Installing kubeadm
      - run:
          name: Installing kubeadm
          command: apt install -y kubeadm=1.10.0-00

      # Installing kubectl
      - run:
          name: Installing kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.9.4/bin/darwin/amd64/kubectl
            sudo chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

      # Postrequisite of kubelet, kubeadm and kubectl
      # - run:
      #     name: Postrequisite of kubelet, kubeadm and kubectl
      #     command: |
      #       systemctl daemon-reload
      #       systemctl enable kubelet
      #       systemctl start kubelet

      # Installing minikube
      - run:
          name: Installing minikube
          command: |
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.26.0/minikube-linux-amd64
            sudo chmod +x minikube
            sudo mv minikube /usr/local/bin/

      # Installing git
      - run:
          name: Installing git
          command: sudo apt install -y git

      # Installing zip
      - run:
          name: Installing zip
          command: sudo apt install -y zip

      # Setting-up Go 1.9.3
      - run:
          name: Setting-up Go 1.9.3
          command: |
            curl -o golang.tar.gz https://storage.googleapis.com/golang/go1.9.3.linux-amd64.tar.gz
            tar -C /usr/local -xzf golang.tar.gz
            rm golang.tar.gz
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export GOPATH=/go' >> $BASH_ENV
            echo 'export PATH="${GOROOT}/bin:${GOPATH}/bin:${PATH}"' >> $BASH_ENV
            source $BASH_ENV

      # Save GOARCH in ARCH Environment variable
      - run:
          name: Save GOARCH in ARCH Environment variable
          command: |
            echo 'export ARCH=$(go env GOARCH)' >> $BASH_ENV
            source $BASH_ENV

      # Inatalling make
      - run:
          name: Installing Build-Essential
          command: |
            sudo apt install -y build-essential

      # Doing actual operations
      - run:
          name: Installing Other Tools
          command: make bootstrap

      # Building Project
      - run:
          name: Building Project
          command:  make

      # Starting minikube
      - run:
          name: Starting minikube
          command: minikube start --vm-driver=none --feature-gates=MountPropagation=true

      # Testing
      - run:
          name: Testing
          command:  make e2e
